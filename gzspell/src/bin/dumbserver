#!/usr/bin/env python

import sys
import logging
import argparse
import socket
import atexit
import shlex

from gzspell import analysis

logger = logging.getLogger(__name__)


def main(*args):

    parser = argparse.ArgumentParser()
    parser.add_argument('--port', type=int, default=9000)
    args = parser.parse_args(args)

    spell = analysis.Spell(
        analysis.SimpleDatabase(['apple', 'banana', 'bananas']))

    # commands
    cmd_dict = {
        "CHECK": spell.check,
        "CORRECT": spell.correct,
        "PROCESS": spell.process,
    }

    # open socket
    sock = socket.socket(socket.AF_INET)
    addr = ('', args.port)
    sock.bind(addr)
    atexit.register(_close, sock)
    sock.listen(5)
    logger.debug("Socket bound and listening to %r", addr)

    while True:
        try:
            remote_sock, addr = sock.accept()
        except OSError as e:
            logger.debug(
                'Got exception listening for socket connection %r', e)
            continue
        try:
            msg = _get(remote_sock)
            cmd, *args = shlex.split(msg)
            # calculate
            result = cmd_dict[cmd](*args)
        except KeyError as e:
            logger.warning('KeyError in server mainloop %r', e)
            continue
        except TypeError as e:
            logger.warning('TypeError in server mainloop %r', e)
            continue
        except ValueError as e:
            logger.warning('ValueError in server mainloop %r', e)
            continue
        # send data
        if result is not None:
            remote_sock.send(wrap(result))
        else:
            remote_sock.send(bytes([0]))

        remote_sock.shutdown(socket.SHUT_RDWR)
        remote_sock.close()


def wrap(chars):
    x = chars.encode('utf8')
    assert len(x) < 256
    return bytes([len(x)]) + chars.encode('utf8')


def _get(sock):
    size = sock.recv(1)
    size = size[0]
    logger.debug("Got size %r", size)
    if not size:
        return None
    msg = sock.recv(size).decode('utf8')
    logger.debug("Got msg %r", msg)
    return msg


def _close(sock):
    sock.shutdown(socket.SHUT_RDWR)
    sock.close()

if __name__ == '__main__':
    logging.basicConfig(level=logging.DEBUG)
    main(*sys.argv[1:])

# vim: set ft=python:
